// session.js - „Çª„ÉÉ„Ç∑„Éß„É≥ÁÆ°ÁêÜÊ©üËÉΩ

import { stopMotionDetection, startMotionDetection, startAutoCalibration } from './sensors.js';
import { watchPosition, calculateDistance } from './maps.js';
import { startTimer, stopTimer, formatTime, calculateStability } from './utils.js';
import { unlockAudio, stopAudioSystem } from './audio.js'; // FIX: stopAudioSystem„Çíimport
import { resetState } from './state.js';


console.log('=== session.js LOADED [FIXED] ===');

// ‚úÖ iOSÁî®„Ç¢„É≥„É≠„ÉÉ„ÇØ„Ç§„Éô„É≥„ÉàÔºàaudio.js„ÅÆunlockAudio„Çí‰ΩøÁî®Ôºâ
document.addEventListener("touchstart", unlockAudio, { once: true });

// ‚úÖ iOS & Android „É¢„Éº„Ç∑„Éß„É≥Ë®±ÂèØ„É™„ÇØ„Ç®„Çπ„Éà
async function requestMotionPermission(callback) {
    if (typeof DeviceMotionEvent !== 'undefined' && typeof DeviceMotionEvent.requestPermission === 'function') {
        try {
            const response = await DeviceMotionEvent.requestPermission();
            if (response === 'granted') {
                console.log("‚úÖ Motion permission granted (iOS)");
                callback();
            } else {
                alert('Âä†ÈÄüÂ∫¶„Çª„É≥„Çµ„Éº„ÅÆ‰ΩøÁî®„ÅåË®±ÂèØ„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ');
            }
        } catch (err) {
            console.error('Motion permission request error:', err);
            alert('Âä†ÈÄüÂ∫¶„Çª„É≥„Çµ„Éº„ÅÆ‰ΩøÁî®Ë®±ÂèØ„É™„ÇØ„Ç®„Çπ„Éà„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ');
        }
    } else {
        console.log("‚úÖ Motion permission not required (Android or Desktop)");
        callback();
    }
}

// ÈáçÁÇπ„Éù„Ç§„É≥„ÉàÂèñÂæóÊ©üËÉΩ
function getFocusPoint() {
    const focusCheckboxes = document.querySelectorAll('input[name="focus"]:checked');
    if (focusCheckboxes.length > 0) {
        return focusCheckboxes[0].value;
    }
    return '';
}

// Ë®òÈå≤ÈñãÂßã
export function startSession() {
    console.log('=== startSession function called ===');
    console.log('Current sessionId:', window.sessionId);
    console.log('isSessionStarting:', window.isSessionStarting);
    
    if (window.isSessionStarting) {
        console.warn('Session start already in progress');
        alert('„Çª„ÉÉ„Ç∑„Éß„É≥ÈñãÂßãÂá¶ÁêÜ‰∏≠„Åß„Åô„ÄÇ„Åó„Å∞„Çâ„Åè„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ„ÄÇ');
        return;
    }
    if (window.sessionId) {
        console.warn('Session already started:', window.sessionId);
        alert('Êó¢„Å´Ë®òÈå≤„ÅåÈñãÂßã„Åï„Çå„Å¶„ÅÑ„Åæ„Åô');
        return;
    }
    
    // ÈáçÁÇπ„Éù„Ç§„É≥„Éà„ÇíÂèñÂæó„Åó„Å¶‰øùÂ≠ò
    const focusPoint = getFocusPoint();
    console.log('Selected focus point:', focusPoint);
    localStorage.setItem('currentFocusPoint', focusPoint);
    const existingSessionId = localStorage.getItem('activeSessionId');
    if (existingSessionId) {
        console.warn('Active session found in localStorage:', existingSessionId);
        const confirmResult = confirm('Êó¢„Å´„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™„Çª„ÉÉ„Ç∑„Éß„É≥„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇÊñ∞„Åó„ÅÑ„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÈñãÂßã„Åó„Åæ„Åô„ÅãÔºü');
        if (!confirmResult) return;
        localStorage.removeItem('activeSessionId');
        localStorage.removeItem('sessionStartTime');
    }
    window.isSessionStarting = true;
    
    const startButton = document.getElementById('start-button');

    unlockAudio()

    if (startButton) {
        startButton.disabled = true;
        startButton.textContent = 'ÈñãÂßã‰∏≠...';
    }
    
    requestMotionPermission(() => {
        console.log('Motion permission granted');
        startMotionDetection();

        // ‚òÖFIX: Ëµ∑ÂãïÊôÇ„Ç™„Éº„Éà„Ç≠„É£„É™„Éñ„É¨„Éº„Ç∑„Éß„É≥„ÇíÂÆüË°å
        startAutoCalibration();

        console.log('Sending session start request...');
        fetch('/start', { method: 'POST' })
            .then(res => {
                console.log('Session start response status:', res.status);
                if (!res.ok) {
                    return res.json().then(err => { throw new Error(err.message || '„Çµ„Éº„Éê„Éº„Ç®„É©„Éº'); });
                }
                return res.json();
            })
            .then(data => {
                console.log('Session start response data:', data);
                if (data.status === 'warning' && data.session_id) {
                    console.log('Using existing active session:', data.session_id);
                    window.sessionId = data.session_id;
                    window.startTime = Date.now();
                } else if (data.session_id) {
                    window.sessionId = data.session_id;
                    window.startTime = Date.now();
                    console.log('Session created successfully:', window.sessionId);
                } else {
                    throw new Error('„Çµ„Éº„Éê„Éº„Åã„Çâ„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥ID„Åå‰∏çÊ≠£„Åß„Åô„ÄÇ');
                }
                localStorage.setItem('activeSessionId', window.sessionId);
                localStorage.setItem('sessionStartTime', window.startTime.toString());
                resetState();
                window.gLogBuffer = [];
                window.gpsLogBuffer = [];
                window.avgGLogBuffer = []; // FIX: avgGLogBuffer„Çí„É™„Çª„ÉÉ„Éà
                window.path = [];
                console.log('Cleared data buffers for new session');
                console.log('SessionID now set to:', window.sessionId);
                console.log('About to redirect to /recording/active');
                window.location.href = '/recording/active';
            })
            .catch(err => {
                console.error('Error during /start fetch or response handling:', err);
                alert('Ë®òÈå≤ÈñãÂßãÊôÇ„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ' + err.message);
                if (startButton) {
                    startButton.disabled = false;
                    startButton.textContent = 'Ë®òÈå≤ÈñãÂßã';
                }
            })
            .finally(() => {
                window.isSessionStarting = false;
            });
    });

    // === GPSÁõ£Ë¶ñ„ÅÆÈñãÂßã ===
    if ('geolocation' in navigator) {
    // Êó¢Â≠ò„ÅÆwatch„ÅåÊÆã„Å£„Å¶„ÅÑ„Åü„Çâ‰∏ÄÂ∫¶Ëß£Èô§ÔºàÂÜçÂÆüË°åÈò≤Ê≠¢Ôºâ
    if (window.watchId) {
        navigator.geolocation.clearWatch(window.watchId);
    }

    window.watchId = navigator.geolocation.watchPosition(
        (pos) => {
        const { latitude, longitude, speed } = pos.coords;
        const timestamp = Date.now();
        const kmh = speed !== null ? speed * 3.6 : 0; // FIX: null„ÉÅ„Çß„ÉÉ„ÇØ

        // FIX: GÂÄ§„Çí„Çª„É≥„Çµ„Éº„ÅÆÊúÄÊñ∞ÂÄ§„Å®ÂêåÊúü
        const gxs = window.latestGX || 0;
        const gys = window.latestGY || 0;
        const gzs = window.latestGZ || 0;

        const log = {
            latitude,
            longitude,
            speed: kmh,
            timestamp: timestamp, // FIX: timestamp_ms -> timestamp „Å´Â§âÊõ¥
            g_x: gxs, // FIX: GÂÄ§„ÇíËøΩÂä†
            g_y: gys,
            g_z: gzs,
            event: 'normal'
        };

        // üîπ „Éê„ÉÉ„Éï„Ç°ÂàùÊúüÂåñ„ÇíÂÆâÂÖ®ÂÅ¥„Å´
        window.gpsLogBuffer = window.gpsLogBuffer || [];
        window.gpsLogBuffer.push(log);

        // üîπ ÁµåË∑Ø„Éá„Éº„ÇøÊõ¥Êñ∞
        window.path = window.path || [];
        window.path.push({ lat: latitude, lng: longitude });

        // üîπ sensors.js ÂÅ¥„ÅßÈÄüÂ∫¶ÂèÇÁÖßÁî®
        window.currentSpeed = kmh;

        console.log(`üìç GPSÊõ¥Êñ∞: ${latitude.toFixed(5)}, ${longitude.toFixed(5)} (${kmh.toFixed(1)} km/h)`);
        },
        (err) => {
        console.error('‚ö†Ô∏è GPSÂèñÂæó„Ç®„É©„Éº:', err);
        },
        {
        enableHighAccuracy: true, // ‚úÖ Á≤æÂ∫¶ÂÑ™ÂÖà
        maximumAge: 1000,         // ‚úÖ „Ç≠„É£„ÉÉ„Ç∑„É•Ë®±ÂÆπ1Áßí
        timeout: 10000            // ‚úÖ „Çø„Ç§„É†„Ç¢„Ç¶„Éà10Áßí
        }
    );

    console.log('‚úÖ GPSÁõ£Ë¶ñ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü');
    } else {
    console.warn('‚ö†Ô∏è „Åì„ÅÆÁ´ØÊú´„Åß„ÅØGPS„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì');
    }
}

// Ë®òÈå≤ÁµÇ‰∫Ü
export function endSession(showAlert = true) {
    console.log("=== endSession called ===");
    
    if (!window.sessionId) {
        console.log("No sessionId found");
        if (showAlert) alert('„Åæ„Å†Ë®òÈå≤„ÅåÈñãÂßã„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
        return;
    }

    console.log("Stopping timer...");
    stopTimer();

    console.log("Clearing intervals...");
    if (window.logFlushInterval) {
        clearInterval(window.logFlushInterval);
        window.logFlushInterval = null;
    }
    if (window.praiseInterval) {
        clearInterval(window.praiseInterval);
        window.praiseInterval = null;
    }

    console.log("Clearing GPS watch...");
    if (window.watchId !== null) {
        navigator.geolocation.clearWatch(window.watchId);
        window.watchId = null;
    }
    
    console.log("Stopping motion detection...");
    stopMotionDetection();

    // FIX: AudioContext„ÇíÂÆâÂÖ®„Å´ÂÅúÊ≠¢
    console.log("Stopping audio system...");
    stopAudioSystem();

    console.log("Calculating distance...");
    let distance = 0;
    try {
        distance = calculateDistance(window.path);
        console.log("Distance calculated:", distance, "km");
    } catch (error) {
        console.error("Error calculating distance:", error);
        distance = 0;
    }
    
    // FIX: „Çµ„Éº„Éê„Éº„Å´ÁµÇ‰∫Ü„É™„ÇØ„Ç®„Çπ„Éà„ÇíÈÄÅ‰ø°„Åô„ÇãÂâç„Å´„ÄÅÊÆã„Çä„ÅÆ„É≠„Ç∞„Çí„Åô„Åπ„Å¶ÈÄÅ‰ø°
    const flushFinalLogs = () => {
        // FIX: „É≠„Éº„Ç´„É´„Éê„ÉÉ„Éï„Ç°„ÇíÂº∑Âà∂„Éï„É©„ÉÉ„Ç∑„É•„Åô„ÇãÈñ¢Êï∞
        const flushOneBuffer = (buffer, endpoint) => {
            if (buffer.length === 0) return Promise.resolve({ status: 'ok', saved_count: 0 });
            
            const logsToSend = buffer.splice(0, buffer.length); // „Åô„Åπ„Å¶Âèñ„ÇäÂá∫„Åô
            console.log(`Sending final ${logsToSend.length} logs to ${endpoint}`);
            
            return fetch(endpoint, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ session_id: window.sessionId, [endpoint.includes('gps') ? 'gps_logs' : endpoint.includes('avg') ? 'avg_g_logs' : 'g_logs']: logsToSend })
            })
            .then(r => r.json())
            .then(data => {
                console.log(`${endpoint} final save response:`, data);
                return data;
            })
            .catch(err => {
                console.error(`ERROR: Final ${endpoint} save failed:`, err);
                return { status: 'error', message: err.message };
            });
        };
        
        // „É≠„Ç∞„ÅÆ‰øùÂ≠òÈ†ÜÂ∫è: GPS„É≠„Ç∞„Åå„Çª„ÉÉ„Ç∑„Éß„É≥„ÅÆÂ∫ßÊ®ô„ÅÆ‰∏ª„Å®„Å™„Çã„Åü„ÇÅ„ÄÅÂÖà„Å´ÈÄÅ„Çã
        return Promise.all([
            flushOneBuffer(window.gpsLogBuffer, '/log_gps_bulk'),
            flushOneBuffer(window.gLogBuffer, '/log_g_only'),
            flushOneBuffer(window.avgGLogBuffer, '/log_avg_g_bulk') // FIX: avgGLogBuffer„ÇÇÊúÄÂæå„Å´„Éï„É©„ÉÉ„Ç∑„É•
        ]);
    };


    console.log("Sending end request to server...");
    
    // ÈáçÁÇπ„Éù„Ç§„É≥„Éà„Çí localStorage „Åã„ÇâÂèñÂæóÔºàfetch„Çà„ÇäÂâç„Å´ÂèñÂæóÔºâ
    const focusPoint = localStorage.getItem('currentFocusPoint') || '';
    
    flushFinalLogs() // „É≠„Ç∞„ÇíÂÖà„Å´ÈÄÅ‰ø°
        .then(() => {
            console.log("All logs flushed, proceeding with session end request.");
            
            return fetch('/end', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    session_id: window.sessionId,
                    distance: distance,
                    sudden_accels: window.suddenAccels,
                    sudden_brakes: window.suddenBrakes,
                    sharp_turns: window.sharpTurns,
                    speed_violations: window.speedViolations,
                    focus_point: focusPoint,  // ÈáçÁÇπ„Éù„Ç§„É≥„Éà„ÇíËøΩÂä†
                }),
            });
        })
        .then(response => {
            console.log("End request response status:", response.status);
            if (!response.ok) {
                return response.json().then(errorData => {
                    throw new Error(errorData.message || 'Ë®òÈå≤ÁµÇ‰∫ÜÊôÇ„Å´„Çµ„Éº„Éê„Éº„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
                });
            }
            return response.json();
        })
        .then(data => {
            console.log("End request response data:", data);
            if (data.status === 'ok' || data.status === 'warning') {
                console.log("Session end confirmed, preparing redirect.");
                
                let elapsedTime = 0;
                if (window.startTime && typeof window.startTime === 'number') {
                    elapsedTime = Math.floor((Date.now() - window.startTime) / 1000);
                    console.log("Elapsed time calculated:", elapsedTime);
                } else {
                    console.warn("startTime is not valid:", window.startTime);
                }
                const sessionData = {
                    distance: distance,
                    sudden_accels: window.suddenAccels,
                    sudden_brakes: window.suddenBrakes,
                    sharp_turns: window.sharpTurns,
                    speed_violations: window.speedViolations,
                    totalTime: formatTime(elapsedTime),
                    stability: calculateStability(window.suddenAccels, window.suddenBrakes, window.sharpTurns, distance),
                    session_id: window.sessionId,  // „Çª„ÉÉ„Ç∑„Éß„É≥ID„ÇíËøΩÂä†
                    focus_point: focusPoint        // ÈáçÁÇπ„Éù„Ç§„É≥„Éà„ÇíËøΩÂä†
                };
                console.log("Session data prepared:", sessionData);
                localStorage.setItem('lastSessionData', JSON.stringify(sessionData));
                localStorage.removeItem('activeSessionId');
                localStorage.removeItem('sessionStartTime');
                window.sessionId = null;
                resetState();
                window.lastAudioPlayTime = {};
                console.log("Cleaning up map elements...");
                if (window.polyline) window.polyline.setPath([]);
                if (window.currentPositionMarker) window.currentPositionMarker.setMap(null);
                window.path = [];
                window.eventMarkers.forEach(marker => marker.setMap(null));
                window.eventMarkers = [];
                console.log("Redirecting to completed page...");
                window.location.href = '/recording/completed';
            } else {
                console.error("End session failed:", data);
                if (showAlert) alert('Ë®òÈå≤ÁµÇ‰∫Ü„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + (data.message || '‰∏çÊòé„Å™„Ç®„É©„Éº'));
            }
        })
        .catch(error => {
            console.error('Ë®òÈå≤ÁµÇ‰∫Ü‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', error);
            console.error('Error stack:', error.stack);
            if (showAlert) alert('Ë®òÈå≤ÁµÇ‰∫Ü‰∏≠„Å´„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Åæ„Åü„ÅØÂá¶ÁêÜ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ' + error.message);
        });
}

// „É≠„Ç∞„Éï„É©„ÉÉ„Ç∑„É•Âá¶ÁêÜ„ÇíÈñãÂßã„Åô„ÇãÈñ¢Êï∞
export function startLogFlush() {
    if (window.logFlushInterval) clearInterval(window.logFlushInterval);
    window.logFlushInterval = setInterval(() => {
        console.log(`Interval flush check: sessionId=${window.sessionId}, G buffer=${window.gLogBuffer.length}, AVG buffer=${window.avgGLogBuffer?.length || 0}, GPS buffer=${window.gpsLogBuffer.length}`);

        if (!window.sessionId) {
            console.log('No session ID available for log flush');
            return;
        }

        // === G„É≠„Ç∞ÈÄÅ‰ø° ===
        if (window.gLogBuffer.length > 0) {
            const logsToSend = window.gLogBuffer.splice(0, window.gLogBuffer.length);
            console.log(`Sending ${logsToSend.length} G logs for session ${window.sessionId}`);
            fetch('/log_g_only', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ session_id: window.sessionId, g_logs: logsToSend })
            })
            .then(r => r.json())
            .then(data => console.log('G logs save response:', data))
            .catch(err => console.error('G„É≠„Ç∞ÈÄÅ‰ø°„Ç®„É©„Éº:', err));
        }

        // === Âπ≥ÊªëÂåñG„É≠„Ç∞ÈÄÅ‰ø° ===
        if (window.avgGLogBuffer && window.avgGLogBuffer.length > 0) {
            const avgToSend = window.avgGLogBuffer.splice(0, window.avgGLogBuffer.length);
            console.log(`Sending ${avgToSend.length} AVG-G logs for session ${window.sessionId}`);
            fetch('/log_avg_g_bulk', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ session_id: window.sessionId, avg_g_logs: avgToSend })
            })
            .then(r => r.json())
            .then(data => console.log('AVG G logs save response:', data))
            .catch(err => console.error('AVG G„É≠„Ç∞ÈÄÅ‰ø°„Ç®„É©„Éº:', err));
        }

        // === GPS„É≠„Ç∞ÈÄÅ‰ø° ===
        if (window.gpsLogBuffer.length > 0) {
            const logsToSend = window.gpsLogBuffer.splice(0, window.gpsLogBuffer.length);
            console.log(`Sending ${logsToSend.length} GPS logs for session ${window.sessionId}`);
            fetch('/log_gps_bulk', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ session_id: window.sessionId, gps_logs: logsToSend })
            })
            .then(r => r.json())
            .then(data => console.log('GPS logs save response:', data))
            .catch(err => console.error('GPS„É≠„Ç∞ÈÄÅ‰ø°„Ç®„É©„Éº:', err));
        }

    }, 10000); // üîπ10Áßí„Åî„Å®
}

// Ë§í„ÇÅ„ÉÅ„Çß„ÉÉ„ÇØÈñãÂßã
export function startPraiseCheck() {
    console.log("‚è∏Ô∏è ÂÆöÊúüË§í„ÇÅ„ÉÅ„Çß„ÉÉ„ÇØ„ÅØÁÑ°ÂäπÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ");
}